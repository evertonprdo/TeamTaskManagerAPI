generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String @db.VarChar(100)
  email    String @unique @db.VarChar(150)
  password String @db.VarChar(255)

  teamMembers       TeamMember[]
  userNotifications UserNotification[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Team {
  id          String @id @default(uuid())
  name        String @db.VarChar(100)
  description String

  tasks       Task[]
  teamMembers TeamMember[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teams")
}

enum TeamMemberStatus {
  INVITED
  ACTIVE
  INACTIVE
}

enum TeamMemberRole {
  OWNER
  ADMIN
  MEMBER
}

model TeamMember {
  id     String           @id @default(uuid())
  role   TeamMemberRole   @default(MEMBER)
  status TeamMemberStatus @default(INVITED)

  userId String @map("user_id") @db.Uuid
  teamId String @map("team_id") @db.Uuid

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  tasks    Task[]
  taskLogs TaskLog[]

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([teamId, userId], map: "team_member", name: "teamMember")
  @@map("team_members")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

model Task {
  id          String       @id @default(uuid())
  title       String       @db.VarChar(200)
  description String
  status      TaskStatus
  priority    TaskPriority

  assignedTo String @map("assigned_to") @db.Uuid
  teamId     String @map("team_id") @db.Uuid

  team       Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamMember TeamMember @relation(fields: [assignedTo], references: [id])

  logs TaskLog[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tasks")
}

model TaskLog {
  id        String @id @default(uuid())
  taskId    String @map("task_id") @db.Uuid
  changedBy String @map("changed_by") @db.Uuid

  oldStatus TaskStatus?
  newStatus TaskStatus

  task       Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  teamMember TeamMember @relation(fields: [changedBy], references: [id])

  changedAt DateTime @default(now()) @map("changed_at")

  @@map("task_logs")
}

model Notification {
  id      String @id @default(uuid())
  title   String @db.VarChar(255)
  content String

  userNotifications UserNotification[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("notifications")
}

model UserNotification {
  id             String    @id @default(uuid())
  receiverId     String    @map("receiver_id") @db.Uuid
  notificationId String    @map("notification_id") @db.Uuid
  readAt         DateTime? @map("read_at")

  user         User         @relation(fields: [receiverId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("user_notifications")
}
